def getBranchName() {
   return "${GIT_BRANCH.split('/').size() > 1 ? GIT_BRANCH.split('/')[1..-1].join('/') : GIT_BRANCH}"
}

def getSimplifiedBranchName() {
   return "${getBranchName().replace('/', '-')}"
}

pipeline {
    environment {
        BRANCH_NAME = getSimplifiedBranchName() // getBranchName()
        DOCKER_IMAGE_NAME = "gounthar/jenkinsci-docker-android-base:$BRANCH_NAME"
    }
    agent any
    options {
        timestamps()
    }
    stages {
        stage('Release on GitHub') {
            environment {
                GITHUB_CREDENTIALS = credentials('github-app-android')
                ANDROID_PUBLISHER_CREDENTIALS = credentials('android-publisher-credentials')
            }
            agent {
                label 'android'
            }
            steps {
                script {
                    timeout(time:15, unit:'MINUTES') {
                        input message: 'Would you like to create a new release for this build?', ok: 'Yes, create for GitHub', submitter: 'No.'
                    }
                    // Later on, move everything into functions and call them here.
                    releaseAlreadyExists = sh (
                        script: 'bash -x ./jenkins/release-already-exists.sh',
                        returnStdout: true
                        )
                    echo "Release already exists: $releaseAlreadyExists."
                    if (releaseAlreadyExists == 'false') {
                        echo "The release does not exist yet, so we can create it."
                        createRelease()
                    } else {
                        echo "The release already exists, so we won't create it."
                    }
                }
            }
        }
        stage('Release on Google Play Store') {
            environment {
                GITHUB_CREDENTIALS = credentials('github-app-android')
                ANDROID_PUBLISHER_CREDENTIALS = credentials('android-publisher-credentials')
            }
            agent {
                label 'android'
            }
            steps {
                timeout(time:15, unit:'MINUTES') {
                    input message: 'Would you like to create a new release for this build?', ok: 'Yes, create for Google', submitter: 'No.'
                }
                echo 'Publishes the bundle on the Google Play Store'
                createGooglePlayStoreRelease()
            }
        }
    }
}


void releaseAlreadyExist(config) {
    GITHUB_CREDENTIALS_PSW = credentials('github-app-android').toString()
    echo $GITHUB_CREDENTIALS_PSW
}

void createRelease() {
    sh (
        script: 'chmod +x ./jenkins/create-release.sh && ./jenkins/create-release.sh',
        returnStdout: true
    )
}

void createGooglePlayStoreRelease() {
    sh (
        script: 'chmod +x ./jenkins/create-gps-release.sh && ./jenkins/create-gps-release.sh',
        returnStdout: true
    )
}
